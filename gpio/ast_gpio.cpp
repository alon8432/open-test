#include "ast_gpio.h"

SioAndOr gpio_read_tab[]
{
	//unlock
	//active
	{LPC2AHB_LDN,0xF0,0x00,0x1E,0xFF},//write gpio address
	{LPC2AHB_LDN,0xF1,0x00,0x78,0xFF},
	{LPC2AHB_LDN,0xF2,0x00,0x00,0xFF},
	{LPC2AHB_LDN,0xF3,0x00,0x00,0xFF},
	{LPC2AHB_LDN,0xF8,0xFC,0x02,0xFF},//Write Mode
	{LPC2AHB_LDN,0xFE,0xFF,0x00,0xFF},//Fire Read
	{LPC2AHB_LDN,0xF4,0xFF,0x00,0xFF},//Read data
	{LPC2AHB_LDN,0xF5,0xFF,0x00,0xFF},
	{LPC2AHB_LDN,0xF6,0xFF,0x00,0xFF},
	{LPC2AHB_LDN,0xF7,0xFF,0x00,0xFF},
	//lock
};

SioAndOr gpio_write_tab[]
{
	//unlock
	//active
	{LPC2AHB_LDN,0xF0,0x00,0x1E,0xFF},//write gpio address
	{LPC2AHB_LDN,0xF1,0x00,0x78,0xFF},
	{LPC2AHB_LDN,0xF2,0x00,0x00,0xFF},
	{LPC2AHB_LDN,0xF3,0x00,0x00,0xFF},
	{LPC2AHB_LDN,0xF8,0xFC,0x02,0xFF},//Write Mode
	{LPC2AHB_LDN,0xF4,0xFF,0x00,0xFF},
	{LPC2AHB_LDN,0xF5,0xFF,0x00,0xFF},
	{LPC2AHB_LDN,0xF6,0xFF,0x00,0xFF},
	{LPC2AHB_LDN,0xF7,0xFF,0x00,0xFF},
	{LPC2AHB_LDN,0xFE,0x00,0xCF,0xFF},//Fire wrtie
	//lock
};

/*
typedef struct AstGpioMapStruct
{
	const char* group_name;//A0-ZZ7
	unsigned int data; //data register
	unsigned int direction;
	unsigned int interrupt_enable;
	unsigned int interrupt_sensitivity_type0;//interrupt_sensitivity
	unsigned int interrupt_sensitivity_type1;
	unsigned int interrupt_sensitivity_type2;
	unsigned int interrupt_status;	
	unsigned int reset_tolerant;
	unsigned int debounce1;
	unsigned int debounce2;
	unsigned int cmd_src0;
	unsigned int cmd_src1;
	unsigned int input_mask;
}AstGpioMap;

*/
//0xFFFF+0, :Unavailable address
AstGpioMap parallel_gpio_map_tab[]
{
	 //---data----direction--enable---type0----type1----type2---status---reset--debounce1-debounce2-cmd_src0-cmd_src1-input_mask
	 {"A",0x0000+0,0x0004+0,0x0008+0,0x000C+0,0x0010+0,0x0014+0,0x0018+0,0x001C+0,0x0040+0,0x0044+0,0x0060+0,0x0064+0,0x01D0+0,},
	 {"B",0x0000+1,0x0004+1,0x0008+1,0x000C+1,0x0010+1,0x0014+1,0x0018+1,0x001C+1,0x0040+1,0x0044+1,0x0060+1,0x0064+1,0x01D0+1,},
	 {"C",0x0000+2,0x0004+2,0x0008+2,0x000C+2,0x0010+2,0x0014+2,0x0018+2,0x001C+2,0x0040+2,0x0044+2,0x0060+2,0x0064+2,0x01D0+2,},
	 {"D",0x0000+3,0x0004+3,0x0008+3,0x000C+3,0x0010+3,0x0014+3,0x0018+3,0x001C+3,0x0040+3,0x0044+3,0x0060+3,0x0064+3,0x01D0+3,},
	 {"E",0x0020+0,0x0024+0,0x0028+0,0x002C+0,0x0030+0,0x0034+0,0x0038+0,0x003C+0,0x0048+0,0x004C+0,0x0068+0,0x006C+0,0x01D4+0,},
	 {"F",0x0020+1,0x0024+1,0x0028+1,0x002C+1,0x0030+1,0x0034+1,0x0038+1,0x003C+1,0x0048+1,0x004C+1,0x0068+1,0x006C+1,0x01D4+1,},
	 {"G",0x0020+2,0x0024+2,0x0028+2,0x002C+2,0x0030+2,0x0034+2,0x0038+2,0x003C+2,0x0048+2,0x004C+2,0x0068+2,0x006C+2,0x01D4+2,},
	 {"H",0x0020+3,0x0024+3,0x0028+3,0x002C+3,0x0030+3,0x0034+3,0x0038+3,0x003C+3,0x0048+3,0x004C+3,0x0068+3,0x006C+3,0x01D4+3,},
	 {"I",0x0070+0,0x0074+0,0x0098+0,0x009C+0,0x00A0+0,0x00A4+0,0x0018+0,0x00AC+0,0x00B0+0,0x00B4+0,0x0090+0,0x0094+0,0x00B8+0,},
	 {"J",0x0070+1,0x0074+1,0x0098+1,0x009C+1,0x00A0+1,0x00A4+1,0x00A8+1,0x00AC+1,0x00B0+1,0x00B4+1,0x0090+1,0x0094+1,0x00B8+1,},
	 {"K",0x0070+2,0x0074+2,0x0098+2,0x009C+2,0x00A0+2,0x00A4+2,0x00A8+2,0x00AC+2,0x00B0+2,0x00B4+2,0x0090+2,0x0094+2,0x00B8+2,},
	 {"L",0x0070+3,0x0074+3,0x0098+3,0x00EC+3,0x00A0+3,0x00A4+3,0x00A8+3,0x00AC+3,0x00B0+3,0x00B4+3,0x0090+3,0x0094+3,0x00B8+3,},
	 {"M",0x0078+0,0x007C+0,0x00E8+0,0x00EC+0,0x00F0+0,0x00F4+0,0x00F8+0,0x00FC+0,0x0100+0,0x0104+0,0x00E0+0,0x00E4+0,0x0108+0,},
	 {"N",0x0078+1,0x007C+1,0x00E8+1,0x00EC+1,0x00F0+1,0x00F4+1,0x00F8+1,0x00FC+1,0x0100+1,0x0104+1,0x00E0+1,0x00E4+1,0x0108+1,},
	 {"O",0x0078+2,0x007C+2,0x00E8+2,0x00EC+2,0x00F0+2,0x00F4+2,0x00F8+2,0x00FC+2,0x0100+2,0x0104+2,0x00E0+2,0x00E4+2,0x0108+2,},
	 {"P",0x0078+3,0x007C+3,0x00E8+3,0x00EC+3,0x00F0+3,0x00F4+3,0x00F8+3,0x00FC+3,0x0100+3,0x0104+3,0x00E0+3,0x00E4+3,0x0108+3,},
	 {"Q",0x0080+0,0x0084+0,0x0118+0,0x011C+0,0x0120+0,0x0124+0,0x0128+0,0x012C+0,0x0130+0,0x0134+0,0x0110+0,0x0114+0,0x0138+0,},
	 {"R",0x0080+1,0x0084+1,0x0118+1,0x011C+1,0x0120+1,0x0124+1,0x0128+1,0x012C+1,0x0130+1,0x0134+1,0x0110+1,0x0114+1,0x0138+1,},
	 {"S",0x0080+2,0x0084+2,0x0118+2,0x011C+2,0x0120+2,0x0124+2,0x0128+2,0x012C+2,0x0130+2,0x0134+2,0x0110+2,0x0114+2,0x0138+2,},
	 {"T",0x0080+3,0x0084+3,0x0118+3,0x011C+3,0x0120+3,0x0124+3,0x0128+3,0x012C+3,0x0130+3,0x0134+3,0x0110+3,0x0114+3,0x0138+3,},
	 {"U",0x0088+0,0x008C+0,0x0148+0,0x014C+0,0x0150+0,0x0154+0,0x0158+0,0x015C+0,0x0160+0,0x0164+0,0x0140+0,0x0144+0,0x0168+0,},
	 {"V",0x0088+1,0x008C+1,0x0148+1,0x014C+1,0x0150+1,0x0154+1,0x0158+1,0x015C+1,0x0160+1,0x0164+1,0x0140+1,0x0144+1,0x0168+1,},
	 {"W",0x0088+2,0x008C+2,0x0148+2,0x014C+2,0x0150+2,0x0154+2,0x0158+2,0x015C+2,0x0160+2,0x0164+2,0x0140+2,0x0144+2,0x0168+2,},
	 {"X",0x0088+3,0x008C+3,0x0148+3,0x014C+3,0x0150+3,0x0154+3,0x0158+3,0x015C+3,0x0160+3,0x0164+3,0x0140+3,0x0144+3,0x0168+3,},
	 {"Y",0x01E0+0,0x01E4+0,0x0178+0,0x017C+0,0x0180+0,0x0184+0,0x0188+0,0x018C+0,0x0190+0,0x0194+0,0x0170+0,0x0174+0,0x0198+0,},
	{ "Z",0x01E0+1,0x01E4+1,0x0178+1,0x017C+1,0x0180+1,0x0184+1,0x0188+1,0x018C+1,0x0190+1,0x0194+1,0x0170+1,0x0174+1,0x0198+1,},
	{"AA",0x01E0+2,0x01E4+2,0x0178+2,0x017C+2,0x0180+2,0x0184+2,0x0188+2,0x018C+2,0x0190+2,0x0194+2,0x0170+2,0x0174+2,0x0198+2,},
	{"AB",0x01E0+3,0x01E4+3,0x0178+3,0x017C+3,0x0180+3,0x0184+3,0x0188+3,0x018C+3,0x0190+3,0x0194+3,0x0170+3,0x0174+3,0x0198+3,},
};

CAstGpio::CAstGpio()
{
	this->set_gpio_base(AST_GPIO_BASE);
}

CAstGpio::~CAstGpio()
{

}

int CAstGpio::get_number(char * pin_name)//"A0-AB7"
{
	int offset0=0,offset1=0,offset2=0,len;
	
	len=strlen(pin_name);
	
	if(len==3)//"AA0-ZZ7"
	{
		offset2=toupper(pin_name[0])-'A';
		offset1=toupper(pin_name[1])-'A';
		offset0=toupper(pin_name[2])-'0';
		return (offset1*8+(offset2*8+(26*8))+offset0);
	}
	
	if(len==2)//"A0-Z7"
	{
		offset1=toupper(pin_name[0])-'A';
		offset0=toupper(pin_name[1])-'0';
		return (offset1*8+offset0);
	}
	
	return -1;
}

bool CAstGpio::is_exist(int pin)// 
{
	if(pin>=MAXIMUM_GPIO) return false;
	if(pin<0) return false;
	return true;
}

void CAstGpio::list_gpio()
{
	
}

int CAstGpio::parse(int pin)
{

}

int CAstGpio::set_native(int pin)
{

}

int CAstGpio::set_gpi(int pin)
{

}

int CAstGpio::set_gpo(int pin,int high_low)//high_low: GPO_LOW ,GPO_HIGH
{

}

#if ast_gpio_TEST
void help()
{
printf("\
[usage]: gpio [option] {p , l , i , o , n ,} \n\
	p: parse  p <gpio_pin> ie:./gpio p 36 \n\
	l: list   l   ie:./gpio l \n\
	i: input  i <gpi_pin>  ie:./gpio i 36 \n\
	o: ouput  o <gpo_pin> <1:high,0:low>  ie:./gpio  o 36 1 \n\
	n: native n <gpio_pin> ie:./gpio  n 36\n\n") ; 
}

int main(int argc,char *argv[])
{
	CAstGpio ast;
	int pin=-1;
	int high_low=-1;

	if(argc<2)
	{
		help(); return -1;//do nothing
	}

	if(argv[1][0]=='p'||argv[1][0]=='i'||argv[1][0]=='n')//p,i,n
	{

		if(argc<3){ help(); return -1;}
		pin=atol(argv[2]);

		if(argv[1][0]=='p') //parse
		{
			ast.parse(pin); return 0;
		}

		if(argv[1][0]=='i') //set_gpi
		{
			ast.set_gpi(pin); return 0;
		}

		if(argv[1][0]=='n') //set_native
		{
			ast.set_native(pin);	return 0;
		}

	}


	if(argv[1][0]=='o')
	{
		if(argc<4){ help(); return -1; }

		pin=atol(argv[2]);

		if(argv[3][0]=='1')
		{
			high_low=GPO_HIGH;
		}
		else high_low=GPO_LOW;

		ast.set_gpo(pin,high_low);

	}//

	return 0;
}

#endif